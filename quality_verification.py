#!/usr/bin/env python3
"""
SmartKnowledgeBotÊú¨Áï™„Çµ„Éº„Éì„ÇπÂìÅË≥™Ê§úË®º„Çπ„ÇØ„É™„Éó„Éà
URL: https://smartknowledgebot-frontend-emjn0hmib-hirohgxxs-projects.vercel.app
"""

import sys
import os
sys.path.append('/Users/gotohiro/Library/Python/3.9/lib/python/site-packages')

from playwright.sync_api import sync_playwright
import time
import json
import traceback
from datetime import datetime

# Ê§úË®ºÁµêÊûú„ÇíÊ†ºÁ¥ç„Åô„ÇãËæûÊõ∏
verification_results = {
    "basic_functionality": [],
    "error_cases": [],
    "ui_ux": [],
    "data_integrity": [],
    "security": [],
    "performance": [],
    "summary": {}
}

def log_result(category, test_name, status, details, priority="medium"):
    """Ê§úË®ºÁµêÊûú„Çí„É≠„Ç∞„Å´Ë®òÈå≤"""
    result = {
        "test_name": test_name,
        "status": status,  # "pass", "fail", "warning"
        "details": details,
        "priority": priority,  # "critical", "high", "medium", "low"
        "timestamp": datetime.now().isoformat()
    }
    verification_results[category].append(result)
    print(f"[{status.upper()}] {test_name}: {details}")

def run_comprehensive_verification():
    """ÂåÖÊã¨ÁöÑÂìÅË≥™Ê§úË®º„ÅÆÂÆüË°å"""
    print("üöÄ SmartKnowledgeBotÊú¨Áï™„Çµ„Éº„Éì„ÇπÂìÅË≥™Ê§úË®ºÈñãÂßã")
    print("=" * 60)

    try:
        with sync_playwright() as p:
            # „Éñ„É©„Ç¶„Ç∂Ëµ∑ÂãïÔºàChromium„ÅßÂÆüË°åÔºâ
            base_url = "https://smartknowledgebot-frontend-cyqgu1xrd-hirohgxxs-projects.vercel.app"

            print(f"\nüîç Chromium„Éñ„É©„Ç¶„Ç∂„Åß„ÅÆÊ§úË®ºÈñãÂßã")
            print("-" * 40)

            try:
                browser = p.chromium.launch(headless=False)  # Ë¶ñË¶öÁöÑÁ¢∫Ë™ç„ÅÆ„Åü„ÇÅheadless=False
                context = browser.new_context(
                    viewport={'width': 1920, 'height': 1080},
                    user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                )
                page = context.new_page()

                # „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆöÈñãÂßã
                start_time = time.time()

                # 1. Âü∫Êú¨Ê©üËÉΩÂãï‰Ωú„ÉÜ„Çπ„Éà
                print("\nüìã 1. Âü∫Êú¨Ê©üËÉΩÂãï‰Ωú„ÉÜ„Çπ„Éà")

                # „Éö„Éº„Ç∏„É≠„Éº„Éâ„ÉÜ„Çπ„Éà
                try:
                    print(f"„Ç¢„ÇØ„Çª„Çπ‰∏≠: {base_url}")
                    response = page.goto(base_url, wait_until="networkidle", timeout=30000)
                    load_time = time.time() - start_time

                    if response and response.status == 200:
                        log_result("basic_functionality", "„Éö„Éº„Ç∏„É≠„Éº„Éâ", "pass",
                                 f"Ê≠£Â∏∏„É≠„Éº„ÉâÂÆå‰∫Ü ({load_time:.2f}Áßí)")
                    else:
                        status_code = response.status if response else "No Response"
                        log_result("basic_functionality", "„Éö„Éº„Ç∏„É≠„Éº„Éâ", "fail",
                                 f"HTTP„Ç®„É©„Éº: {status_code}", "critical")
                        return
                except Exception as e:
                    log_result("basic_functionality", "„Éö„Éº„Ç∏„É≠„Éº„Éâ", "fail",
                             f"„Éö„Éº„Ç∏„É≠„Éº„ÉâÂ§±Êïó: {str(e)}", "critical")
                    return

                # „Éö„Éº„Ç∏„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„ÉàÊíÆÂΩ±
                try:
                    page.screenshot(path="verification_screenshot.png")
                    print("üì∏ „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà‰øùÂ≠ò: verification_screenshot.png")
                except:
                    pass

                # „Çø„Ç§„Éà„É´Á¢∫Ë™ç
                try:
                    title = page.title()
                    if title and len(title) > 0:
                        log_result("basic_functionality", "„Éö„Éº„Ç∏„Çø„Ç§„Éà„É´", "pass",
                                 f"„Çø„Ç§„Éà„É´Á¢∫Ë™ç: '{title}'")
                    else:
                        log_result("basic_functionality", "„Éö„Éº„Ç∏„Çø„Ç§„Éà„É´", "warning",
                                 f"„Çø„Ç§„Éà„É´Êú™Ë®≠ÂÆö„Åæ„Åü„ÅØÁ©∫: '{title}'", "medium")
                except Exception as e:
                    log_result("basic_functionality", "„Éö„Éº„Ç∏„Çø„Ç§„Éà„É´", "fail",
                             f"„Çø„Ç§„Éà„É´ÂèñÂæóÂ§±Êïó: {str(e)}", "low")

                # DOMË¶ÅÁ¥†„ÅÆÂü∫Êú¨ÊßãÈÄ†Á¢∫Ë™ç
                try:
                    # „Éï„Ç©„Éº„É†Ë¶ÅÁ¥†„ÅÆÊ§úÂá∫
                    text_inputs = page.locator('input[type="text"], textarea')
                    buttons = page.locator('button')

                    print(f"üîç Ê§úÂá∫„Åï„Çå„ÅüË¶ÅÁ¥†: „ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ={text_inputs.count()}, „Éú„Çø„É≥={buttons.count()}")

                    if text_inputs.count() > 0 and buttons.count() > 0:
                        log_result("basic_functionality", "Âü∫Êú¨UIË¶ÅÁ¥†", "pass",
                                 f"ÂøÖË¶Å„Å™„Éï„Ç©„Éº„É†Ë¶ÅÁ¥†„ÅåÂ≠òÂú® (ÂÖ•Âäõ:{text_inputs.count()}, „Éú„Çø„É≥:{buttons.count()})")
                    else:
                        log_result("basic_functionality", "Âü∫Êú¨UIË¶ÅÁ¥†", "fail",
                                 f"ÂøÖË¶Å„Å™Ë¶ÅÁ¥†„Åå‰∏çË∂≥ (ÂÖ•Âäõ:{text_inputs.count()}, „Éú„Çø„É≥:{buttons.count()})", "critical")
                        return
                except Exception as e:
                    log_result("basic_functionality", "Âü∫Êú¨UIË¶ÅÁ¥†", "fail",
                             f"UIË¶ÅÁ¥†Ê§úÂá∫Â§±Êïó: {str(e)}", "critical")
                    return

                # 2. „É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥„ÉÜ„Çπ„Éà
                print("\nüì± 2. „É¨„Çπ„Éù„É≥„Ç∑„Éñ„Éá„Ç∂„Ç§„É≥„ÉÜ„Çπ„Éà")

                viewports = [
                    ("„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó", 1920, 1080),
                    ("„Çø„Éñ„É¨„ÉÉ„Éà", 768, 1024),
                    ("„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥", 375, 667)
                ]

                for viewport_name, width, height in viewports:
                    try:
                        page.set_viewport_size({"width": width, "height": height})
                        time.sleep(2)  # „É¨„É≥„ÉÄ„É™„É≥„Ç∞ÂæÖÊ©ü

                        # „Éï„Ç©„Éº„É†Ë¶ÅÁ¥†„ÅåË¶ã„Åà„ÇãÁä∂ÊÖã„ÅãÁ¢∫Ë™ç
                        text_input = page.locator('input[type="text"], textarea').first
                        button = page.locator('button').first

                        input_visible = text_input.is_visible() if text_input.count() > 0 else False
                        button_visible = button.is_visible() if button.count() > 0 else False

                        if input_visible and button_visible:
                            log_result("ui_ux", f"„É¨„Çπ„Éù„É≥„Ç∑„Éñ_{viewport_name}", "pass",
                                     f"{viewport_name}({width}x{height})„ÅßÊ≠£Â∏∏Ë°®Á§∫")
                        else:
                            log_result("ui_ux", f"„É¨„Çπ„Éù„É≥„Ç∑„Éñ_{viewport_name}", "fail",
                                     f"{viewport_name}„ÅßË¶ÅÁ¥†„ÅåË¶ã„Åà„Å™„ÅÑ (ÂÖ•Âäõ:{input_visible}, „Éú„Çø„É≥:{button_visible})", "high")
                    except Exception as e:
                        log_result("ui_ux", f"„É¨„Çπ„Éù„É≥„Ç∑„Éñ_{viewport_name}", "fail",
                                 f"{viewport_name}„ÉÜ„Çπ„ÉàÂ§±Êïó: {str(e)}", "medium")

                # „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Çµ„Ç§„Ç∫„Å´Êàª„Åô
                page.set_viewport_size({"width": 1920, "height": 1080})
                time.sleep(1)

                # 3. Ë≥™ÂïèÈÄÅ‰ø°Ê©üËÉΩ„ÉÜ„Çπ„Éà
                print("\nüí¨ 3. Ë≥™ÂïèÈÄÅ‰ø°Ê©üËÉΩ„ÉÜ„Çπ„Éà")

                test_questions = [
                    ("Âü∫Êú¨Ë≥™Âïè", "Ë£ÖÂÇô„ÅÆÂº∑ÂåñÊñπÊ≥ï„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ"),
                    ("Áü≠„ÅÑË≥™Âïè", "„Åì„Çì„Å´„Å°„ÅØ")
                ]

                for test_name, question in test_questions:
                    try:
                        print(f"„ÉÜ„Çπ„ÉàÂÆüË°å: {test_name} - '{question}'")

                        # „Éï„Ç©„Éº„É†Ë¶ÅÁ¥†„ÇíÂÜçÂèñÂæó
                        text_input = page.locator('input[type="text"], textarea').first
                        submit_button = page.locator('button[type="submit"], button').first

                        if text_input.count() == 0 or submit_button.count() == 0:
                            log_result("basic_functionality", f"„Éï„Ç©„Éº„É†Ë¶ÅÁ¥†_{test_name}", "fail",
                                     f"„Éï„Ç©„Éº„É†Ë¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ", "critical")
                            continue

                        # Êó¢Â≠ò„ÅÆÂÖ•Âäõ„Çí„ÇØ„É™„Ç¢
                        text_input.clear()
                        text_input.fill(question)

                        # ÈÄÅ‰ø°Ââç„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
                        submit_start_time = time.time()
                        submit_button.click()

                        print(f"ÈÄÅ‰ø°„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØÂÆå‰∫Ü - ÂøúÁ≠îÂæÖÊ©ü‰∏≠...")

                        # „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„ÅÆÁ¢∫Ë™çÔºà5ÁßíÂæÖÊ©üÔºâ
                        time.sleep(5)

                        # „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                        loading_selectors = [
                            '[data-testid="loading"]',
                            '.loading',
                            '.spinner',
                            '[aria-label*="loading"]',
                            '[aria-label*="Loading"]',
                            '.animate-spin'
                        ]

                        loading_found = False
                        for selector in loading_selectors:
                            if page.locator(selector).count() > 0:
                                loading_found = True
                                break

                        if loading_found:
                            log_result("ui_ux", f"„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫_{test_name}", "pass",
                                     f"„É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„ÅåË°®Á§∫„Åï„Çå„Çã")
                        else:
                            log_result("ui_ux", f"„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫_{test_name}", "warning",
                                     f"„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫„ÅåÁ¢∫Ë™ç„Åß„Åç„Å™„ÅÑ", "low")

                        # ÂõûÁ≠îÂæÖÊ©üÔºàÊúÄÂ§ß45ÁßíÔºâ
                        response_found = False
                        print("ÂõûÁ≠îÂæÖÊ©ü‰∏≠...")

                        for wait_second in range(45):
                            time.sleep(1)
                            if wait_second % 5 == 0:
                                print(f"  ÂæÖÊ©ü‰∏≠... {wait_second}/45Áßí")

                            # ÂõûÁ≠î„Ç®„É™„Ç¢„ÇíÊé¢„ÅôÔºàË§áÊï∞„ÅÆ„Çª„É¨„ÇØ„Çø„Éº„ÇíË©¶Ë°åÔºâ
                            response_selectors = [
                                '[data-testid="response"]',
                                '.response',
                                '.answer',
                                '.result',
                                'div[role="region"]',
                                'main div div',  # Ê±éÁî®ÁöÑ„Å™divÊßãÈÄ†
                                'article',
                                'section'
                            ]

                            for selector in response_selectors:
                                elements = page.locator(selector)
                                for i in range(elements.count()):
                                    try:
                                        element_text = elements.nth(i).inner_text()
                                        if element_text and len(element_text.strip()) > 20:  # 20ÊñáÂ≠ó‰ª•‰∏ä„ÅÆÂøúÁ≠î
                                            response_time = time.time() - submit_start_time
                                            log_result("basic_functionality", f"RAGÂõûÁ≠î_{test_name}", "pass",
                                                     f"ÂõûÁ≠îÂèñÂæóÊàêÂäü ({response_time:.1f}Áßí, {len(element_text)}ÊñáÂ≠ó)")
                                            print(f"‚úÖ ÂõûÁ≠îÂèñÂæóÊàêÂäü: {len(element_text)}ÊñáÂ≠ó")
                                            response_found = True
                                            break
                                    except:
                                        continue
                                if response_found:
                                    break
                            if response_found:
                                break

                            # „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÁ¢∫Ë™ç
                            error_selectors = [
                                '[data-testid="error"]',
                                '.error',
                                '.alert-error',
                                '.text-red-500',
                                '.text-red-600'
                            ]

                            for selector in error_selectors:
                                error_elements = page.locator(selector)
                                if error_elements.count() > 0:
                                    try:
                                        error_text = error_elements.first.inner_text()
                                        if error_text and len(error_text.strip()) > 0:
                                            log_result("error_cases", f"API „Ç®„É©„Éº_{test_name}", "warning",
                                                     f"„Ç®„É©„ÉºË°®Á§∫: {error_text}", "medium")
                                            print(f"‚ö†Ô∏è „Ç®„É©„ÉºÊ§úÂá∫: {error_text}")
                                            break
                                    except:
                                        continue

                        if not response_found:
                            log_result("basic_functionality", f"RAGÂõûÁ≠î_{test_name}", "fail",
                                     f"45Áßí‰ª•ÂÜÖ„Å´ÂõûÁ≠î„ÅåÂæó„Çâ„Çå„Å™„ÅÑ", "high")
                            print(f"‚ùå „Çø„Ç§„É†„Ç¢„Ç¶„Éà: 45Áßí‰ª•ÂÜÖ„Å´ÂõûÁ≠î„Å™„Åó")

                        # Â∞ë„ÅóÂæÖÊ©ü„Åó„Å¶„Åã„ÇâÊ¨°„ÅÆ„ÉÜ„Çπ„Éà„Å∏
                        time.sleep(3)

                    except Exception as e:
                        log_result("basic_functionality", f"Ë≥™ÂïèÈÄÅ‰ø°_{test_name}", "fail",
                                 f"ÈÄÅ‰ø°Âá¶ÁêÜÂ§±Êïó: {str(e)}", "high")
                        print(f"‚ùå ÈÄÅ‰ø°„Ç®„É©„Éº: {str(e)}")

                # 4. „Ç®„É©„Éº„Ç±„Éº„Çπ„ÉÜ„Çπ„Éà
                print("\n‚ö†Ô∏è 4. „Ç®„É©„Éº„Ç±„Éº„Çπ„ÉÜ„Çπ„Éà")

                # Á©∫ÂÖ•Âäõ„ÉÜ„Çπ„Éà
                try:
                    text_input = page.locator('input[type="text"], textarea').first
                    submit_button = page.locator('button[type="submit"], button').first

                    if text_input.count() > 0 and submit_button.count() > 0:
                        text_input.clear()
                        submit_button.click()

                        time.sleep(3)

                        # „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Åæ„Åü„ÅØ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„ÅÆÁ¢∫Ë™ç
                        error_found = False
                        validation_selectors = [
                            '[data-testid="error"]',
                            '.error',
                            '.alert-error',
                            '.text-red-500',
                            '.text-red-600',
                            '[data-testid="validation"]',
                            '.validation-error'
                        ]

                        for selector in validation_selectors:
                            if page.locator(selector).count() > 0:
                                error_found = True
                                break

                        if error_found:
                            log_result("error_cases", "Á©∫ÂÖ•Âäõ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥", "pass",
                                     f"Á©∫ÂÖ•ÂäõÊôÇ„ÅÆÈÅ©Âàá„Å™„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞")
                        else:
                            log_result("error_cases", "Á©∫ÂÖ•Âäõ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥", "warning",
                                     f"Á©∫ÂÖ•ÂäõÊôÇ„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Åå‰∏çÊòéÁ¢∫", "medium")
                    else:
                        log_result("error_cases", "Á©∫ÂÖ•Âäõ„ÉÜ„Çπ„Éà", "fail",
                                 f"„Éï„Ç©„Éº„É†Ë¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ", "high")

                except Exception as e:
                    log_result("error_cases", "Á©∫ÂÖ•Âäõ„ÉÜ„Çπ„Éà", "fail",
                             f"Á©∫ÂÖ•Âäõ„ÉÜ„Çπ„ÉàÂ§±Êïó: {str(e)}", "medium")

                # 5. „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âü∫Êú¨„ÉÅ„Çß„ÉÉ„ÇØ
                print("\nüîí 5. „Çª„Ç≠„É•„É™„ÉÜ„Ç£Âü∫Êú¨„ÉÅ„Çß„ÉÉ„ÇØ")

                # XSSÂü∫Êú¨„ÉÜ„Çπ„Éà
                try:
                    text_input = page.locator('input[type="text"], textarea').first
                    if text_input.count() > 0:
                        xss_payload = "<script>alert('XSS')</script>"
                        text_input.clear()
                        text_input.fill(xss_payload)

                        # ÂÆüÈöõ„Å´ÈÄÅ‰ø°„ÅØË°å„Çè„Åö„ÄÅÂÖ•ÂäõÂÄ§„ÅÆÂá¶ÁêÜ„ÇíÁ¢∫Ë™ç
                        input_value = text_input.input_value()
                        if xss_payload in input_value:
                            log_result("security", "XSSÂÖ•ÂäõÂá¶ÁêÜ", "warning",
                                     f"„Çπ„ÇØ„É™„Éó„Éà„Çø„Ç∞„Åå„Åù„ÅÆ„Åæ„ÅæÂÖ•Âäõ„Åï„Çå„Çã", "medium")
                        else:
                            log_result("security", "XSSÂÖ•ÂäõÂá¶ÁêÜ", "pass",
                                     f"ÂÖ•ÂäõÂÄ§„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã")
                    else:
                        log_result("security", "XSSÂÖ•Âäõ„ÉÜ„Çπ„Éà", "fail",
                                 f"ÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑ", "medium")

                except Exception as e:
                    log_result("security", "XSSÂü∫Êú¨„ÉÜ„Çπ„Éà", "fail",
                             f"XSS„ÉÜ„Çπ„ÉàÂ§±Êïó: {str(e)}", "low")

                # 6. „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆö
                print("\n‚ö° 6. „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆö")

                try:
                    # „Éö„Éº„Ç∏ÂÜçË™≠„ÅøËæº„Åø„Åß„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆö
                    perf_start = time.time()
                    page.reload(wait_until="networkidle")
                    perf_end = time.time()

                    reload_time = perf_end - perf_start
                    if reload_time < 5:
                        log_result("performance", "„Éö„Éº„Ç∏ÂÜçË™≠„ÅøËæº„ÅøÈÄüÂ∫¶", "pass",
                                 f"ÂÜçË™≠„ÅøËæº„ÅøÊôÇÈñì: {reload_time:.2f}Áßí")
                    elif reload_time < 10:
                        log_result("performance", "„Éö„Éº„Ç∏ÂÜçË™≠„ÅøËæº„ÅøÈÄüÂ∫¶", "warning",
                                 f"„ÇÑ„ÇÑÈÅÖ„ÅÑÂÜçË™≠„ÅøËæº„Åø: {reload_time:.2f}Áßí", "low")
                    else:
                        log_result("performance", "„Éö„Éº„Ç∏ÂÜçË™≠„ÅøËæº„ÅøÈÄüÂ∫¶", "fail",
                                 f"ÂÜçË™≠„ÅøËæº„Åø„ÅåÈÅÖ„ÅÑ: {reload_time:.2f}Áßí", "medium")

                except Exception as e:
                    log_result("performance", "„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆö", "fail",
                             f"„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆöÂ§±Êïó: {str(e)}", "low")

                # ÊúÄÁµÇ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà
                try:
                    page.screenshot(path="verification_final.png")
                    print("üì∏ ÊúÄÁµÇ„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà‰øùÂ≠ò: verification_final.png")
                except:
                    pass

                browser.close()
                print(f"‚úÖ „Éñ„É©„Ç¶„Ç∂„Åß„ÅÆÊ§úË®ºÂÆå‰∫Ü")

            except Exception as e:
                log_result("basic_functionality", "„Éñ„É©„Ç¶„Ç∂ÂÖ®‰Ωì", "fail",
                         f"„Éñ„É©„Ç¶„Ç∂Ê§úË®ºÂÖ®‰ΩìÂ§±Êïó: {str(e)}", "high")
                print(f"‚ùå „Éñ„É©„Ç¶„Ç∂„Åß„Ç®„É©„Éº: {str(e)}")

    except Exception as e:
        print(f"‚ùå PlaywrightÂàùÊúüÂåñ„Ç®„É©„Éº: {str(e)}")
        verification_results["summary"]["critical_error"] = str(e)

def generate_summary():
    """Ê§úË®ºÁµêÊûú„Çµ„Éû„É™„Éº„ÅÆÁîüÊàê"""
    print("\n" + "=" * 60)
    print("üîç Ê§úË®ºÁµêÊûú„Çµ„Éû„É™„Éº")
    print("=" * 60)

    # ÁµêÊûú„Çµ„Éû„É™„ÉºÁîüÊàê
    total_tests = 0
    passed_tests = 0
    failed_tests = 0
    warnings = 0

    for category, results in verification_results.items():
        if category == "summary":
            continue

        category_pass = 0
        category_fail = 0
        category_warn = 0

        for result in results:
            total_tests += 1
            if result["status"] == "pass":
                passed_tests += 1
                category_pass += 1
            elif result["status"] == "fail":
                failed_tests += 1
                category_fail += 1
            elif result["status"] == "warning":
                warnings += 1
                category_warn += 1

        if results:  # „Ç´„ÉÜ„Ç¥„É™„Å´ÁµêÊûú„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøË°®Á§∫
            print(f"\nüìä {category.replace('_', ' ').title()}: {category_pass}ÊàêÂäü / {category_fail}Â§±Êïó / {category_warn}Ë≠¶Âëä")

    print(f"\nüéØ ÂÖ®‰ΩìÁµêÊûú: {passed_tests}ÊàêÂäü / {failed_tests}Â§±Êïó / {warnings}Ë≠¶Âëä (Á∑è„ÉÜ„Çπ„ÉàÊï∞: {total_tests})")

    # ÊàêÂäüÁéáË®àÁÆó
    if total_tests > 0:
        success_rate = (passed_tests / total_tests) * 100
        print(f"üìà ÊàêÂäüÁéá: {success_rate:.1f}%")

        if success_rate >= 80:
            print("‚úÖ ÂÖ®‰ΩìÁöÑ„Å´ËâØÂ•Ω„Å™ÂìÅË≥™")
        elif success_rate >= 60:
            print("‚ö†Ô∏è ÊîπÂñÑ„ÅåÂøÖË¶Å„Å™ÁÆáÊâÄ„ÅÇ„Çä")
        else:
            print("‚ùå ÈáçË¶Å„Å™ÂïèÈ°å„ÅåÂ§öÊï∞Â≠òÂú®")

    verification_results["summary"] = {
        "total_tests": total_tests,
        "passed": passed_tests,
        "failed": failed_tests,
        "warnings": warnings,
        "success_rate": f"{success_rate:.1f}%" if total_tests > 0 else "0%",
        "timestamp": datetime.now().isoformat()
    }

    print(f"\nÊ§úË®ºÂÆå‰∫ÜÊôÇÂàª: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

def print_detailed_results():
    """Ë©≥Á¥∞ÁµêÊûú„ÅÆÂá∫Âäõ"""
    print("\n" + "=" * 60)
    print("üìã Ë©≥Á¥∞Ê§úË®ºÁµêÊûú")
    print("=" * 60)

    # ÂÑ™ÂÖàÂ∫¶Âà•„Å´ÁµêÊûú„ÇíÂàÜÈ°û
    critical_issues = []
    high_issues = []
    medium_issues = []
    low_issues = []

    for category, results in verification_results.items():
        if category == "summary":
            continue

        for result in results:
            if result["status"] == "fail":
                if result["priority"] == "critical":
                    critical_issues.append(result)
                elif result["priority"] == "high":
                    high_issues.append(result)
                elif result["priority"] == "medium":
                    medium_issues.append(result)
                else:
                    low_issues.append(result)

    # ÈáçË¶ÅÂ∫¶È†Ü„Å´Ë°®Á§∫
    if critical_issues:
        print("\nüö® „ÇØ„É™„ÉÜ„Ç£„Ç´„É´ÔºàÂç≥Â∫ß‰øÆÊ≠£ÂøÖË¶ÅÔºâ:")
        for issue in critical_issues:
            print(f"  - {issue['test_name']}: {issue['details']}")

    if high_issues:
        print("\nüî• È´òÂÑ™ÂÖàÂ∫¶ÔºàÊú¨Áï™ÈÅãÁî®Ââç‰øÆÊ≠£Êé®Â•®Ôºâ:")
        for issue in high_issues:
            print(f"  - {issue['test_name']}: {issue['details']}")

    if medium_issues:
        print("\n‚ö†Ô∏è ‰∏≠ÂÑ™ÂÖàÂ∫¶ÔºàÊîπÂñÑÊé®Â•®Ôºâ:")
        for issue in medium_issues:
            print(f"  - {issue['test_name']}: {issue['details']}")

    # Ë≠¶Âëä‰∫ãÈ†Ö„ÇÇË°®Á§∫
    warning_issues = []
    for category, results in verification_results.items():
        if category == "summary":
            continue
        for result in results:
            if result["status"] == "warning":
                warning_issues.append(result)

    if warning_issues:
        print("\nüí° ÊîπÂñÑÊèêÊ°àÔºàË≠¶Âëä‰∫ãÈ†ÖÔºâ:")
        for warning in warning_issues:
            print(f"  - {warning['test_name']}: {warning['details']}")

if __name__ == "__main__":
    run_comprehensive_verification()
    generate_summary()
    print_detailed_results()

    # ÁµêÊûú„ÇíJSON„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
    try:
        with open("verification_results.json", "w", encoding="utf-8") as f:
            json.dump(verification_results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ Ë©≥Á¥∞ÁµêÊûú„Çíverification_results.json„Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü")
    except Exception as e:
        print(f"‚ö†Ô∏è ÁµêÊûú‰øùÂ≠ò„Ç®„É©„Éº: {str(e)}")
